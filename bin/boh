#!/usr/bin/env node

var path = require("path"),
    fs = require("fs"),
    async = require("async"),
    colors = require("colors"),
    chokidar = require("chokidar"),
    debug = require("debug")("boh:cli"),
    boh = require("../"),
    config = require("../package.json"),
    program = require("commander");

// Tab character
const TAB = "    ";
const BOH = "boh".bgBlack.blue.bold;

/**
 * Import the default reporter.
 * TODO: Custom reporters.
 * @type {Function}
 */
var reporter = require("../src/reporters/default");

program
    .version(config.version)
    .option("--watch", "Watch for changes.")
    .option("--index", "Print the boh index and exit.", false)
    .option("--ignore [paths]", "Specify paths to ignore in the index (globs).")
    .option("-v, --verbose", "Log all boh output to stdout.")
    .arguments("<dir>")
    .action(function(dir) {
        program.__executed = true;
        main(dir);
    });

/**
 * Override the default help output
 */
program.outputHelp = function() {
    log([
        "",
        "   " + BOH + " [options]".magenta + " <dir>",
        "",
        "     -h, --help        ".magenta + "Output usage information",
        "     -V, --version     ".magenta + "Output the version number",
        "     --watch           ".magenta + "Watch for changes.",
        "     --index           ".magenta + "Print the boh index and exit.",
        "     --ignore [paths]  ".magenta + "Specify paths to ignore in the index (globs).",
        "     -v, --verbose     ".magenta + "Log all boh output to stdout.",
        ""
    ].join("\n"))
};

// Only run if this file is run directly
if(require.main === module) {
    // Run the command
    program.parse(process.argv);

    // Pity commander can't specify a default action. This pattern is pretty odd.
    if(!program.__executed) main();
}

/**
 * The main entry point for the program.
 * @param  {String} dir Directory to run in (optional)
 */
function main(dir) {
    if(program.index) index(dir);
    else run(dir, function(err, index) {
        if(program.watch) watch(index);
    });
}

/**
 * Run boh in a directory.
 * @param  {String} dir The directory to run boh in.
 */
function run(dir, callback) {
    // Get the directory from the first argument
    dir = relative(dir);

    var _index;

    async.waterfall([
        // Stat the input
        fs.stat.bind(fs, dir),

        // Make sure we have a directory
        function(stat, callback) {
            if(stat.isDirectory()) callback(null, stat);
            else fail("%s not a directory.", dir);
        },

        // Output the directory
        function(stat, callback) {
            var cwd = path.relative(process.cwd(), dir);
            logRaw("Running " + BOH + " in " + (!cwd ? "the current directory" : cwd + "/").magenta);
            callback();
        },

        // Find installed plugins
        boh.findPlugins.bind(null),

        function(plugins, callback) { 
            // No plugins, exit
            if(plugins.length === 0) {
                logRaw(".\n");
                return callback();
            }

            logRaw(" with plugins: ")
            var emitter = boh.requirePlugins(plugins, function(err) {
                if(err) callback(err);
                else logRaw("\n"), callback();
            });

            emitter.on("plugin:loaded", function(plugin) { 
                logRaw((plugin + " ✓ ")[plugin.__global ? "blue" : "green"]); 
            });

            emitter.on("plugin:error", function(plugin, err) {
                logRaw((plugin + " ✘ ").red); 
            });
        },

        function(callback) {
            var options = {};

            // Ignore option. Supports micromatch (https://www.npmjs.com/package/micromatch)
            if(program.ignore) options.ignore = program.ignore.split(",").map(function(p) { return relative(p.trim()); });

            callback(null, options);
        },

        // Build the index
        function(options, callback) {
            var indexer = new boh.Indexer();

            indexer.on("error:index", function(err) {
                log(indent(1, relative(err.file).yellow + " -> " + "Index Error".red));
                log(indent(2, err.message));
            });

            indexer.index(dir, options, callback);
        },

        function(index, callback) {
            if(index.files.length) {
                // Save a reference to the index
                _index = index;

                // Create the new reporter and build!
                buildReporter(program.verbose, false, dir).build(index, callback);
            } else log("No files found. :(");
        }
    ], function(err) {
        if(callback) callback(err, _index);
        else if(err && err.code === "ENOENT") fail("%s does not exist.", dir);
        else if(err) fail(err);
    })
}

/**
 * Start boh watching a directory.
 * @param  {boh.Index} index The index to watch.
 */
function watch(index) {
    var cwd = path.relative(process.cwd(), index.root);
    log("\n" + BOH + " is watching for changes in %s..", (!cwd ? "the current directory" : cwd).magenta);

    // Create the chokidar watcher
    var watcher = chokidar.watch(index.root, { 
        ignoreInitial: true,
        ignored: index.ignored, 
        persistent: true 
    });

    // Bind the events
    Object.keys(events).forEach(function(event) {
        debug("Binding filesystem event %s.", event);
        watcher.on(event, events[event].bind(null, index, index.root));
    });
}

var events = {
    add: function(index, dir, file, callback) {
        index.addFile(file, function(err) {
            if(err) log(index.relative(file) + " ✘".red + " -> " + "Error: ".red + err.message + "\n");
            else log("New file".green + " %s added to the index.", file);

            if(callback) callback(err);
        });
    },

    addDir: function(index, dir, directory, callback) {
        index.addDirectory(directory);
        if(callback) callback();
    },

    change: function(index, dir, file, callback) {
        // Re-add the file in case the rules change
        index.addFile(file, function(err) {
            if(err) {
                log(index.relative(file) + " ✘".red + " -> " + "Error: ".red + err.message + "\n");
                if(callback) callback(err);
            } else {
                log("\n%s changed.", file.yellow);

                // Find the rules associated with that file and run them
                var rules = index.getRulesForFile(file);

                if(rules && rules.length) 
                    // And build the select rules.
                    buildReporter(program.verbose, true, dir).buildRules(index, rules, callback);
            }
        });
    }
};

/**
 * Return the path of a directory relative to the cwd.
 * @param  {String} dir Path. (optional, returns cwd otherwise);
 * @return {[type]}     [description]
 */
function relative(dir) {
    if(!dir) return process.cwd();
    else if(dir) return path.resolve(process.cwd(), dir);
}

/**
 * Print out the index of the directory.
 * @param  {String} dir Path.
 */
function index(dir) {
    var indexer = new boh.Indexer();
    indexer.index(relative(dir), function(err, index) {
        if(err) fail(err);
        else index.toString().split("\n").forEach(function(line) { log(line); });
    });
}

/**
 * Log something to stdout.
 */
function log() {
    console.log.apply(console, arguments);
}

/**
 * Log raw to stdout.
 */
function logRaw() {
    process.stdout.write.apply(process.stdout, arguments);
}

/**
 * Indent a multi line string.
 * @param  {Number} level  Indentation level.
 * @param  {String} string 
 * @return {String}        Indented string.
 */
function indent(level, string) {
    var indentation = ""; 
    for(var i = 0; i < level; i++) indentation += TAB;
    return string.split("\n").map(function(line) {
        return indentation + line;
    }).join("\n");
}

/**
 * The program fails.
 * @param  {Error} err 
 */
function fail() {
    var args = Array.prototype.slice.call(arguments);

    if(typeof args[0] === "string") args[0] = "Error: ".red + args[0];

    console.log.apply(console, args);

    process.exit();
}

/**
 * Create a new builder reporter.
 * @return {boh.Builder} 
 */
function buildReporter(verbose, watching, dir) {
    // Create the build reporter
    var builder = new boh.Builder();

    // Create the reporter
    reporter.call(null, {
        log: log,
        raw: logRaw,
        fail: fail,
        program: program,
        indent: indent,
        relative: relative
    }, builder, verbose, watching, dir);

    return builder;
}

// Exporting for testing.
module.exports = {
    events: events
};